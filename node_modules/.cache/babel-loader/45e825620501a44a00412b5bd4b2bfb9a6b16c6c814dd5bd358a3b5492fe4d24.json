{"ast":null,"code":"import { stopSubmit } from \"redux-form\";\nimport { authAPI } from \"../api/api\";\nimport { getAuthUserData } from \"./auth-reducer\";\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\nlet initialState = {\n  initialized: false\n};\nconst appReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case INITIALIZED_SUCCESS:\n      return {\n        ...state,\n        initialized\n      };\n    default:\n      return state;\n  }\n};\nexport const initializedSuccess = () => {\n  return {\n    type: INITIALIZED_SUCCESS\n  };\n};\nexport const initializeApp = () => dispatch => {\n  dispatch(getAuthUserData());\n  dispatch(initializedSuccess());\n  authAPI.me().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        login,\n        email\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  });\n};\nexport default appReducer;","map":{"version":3,"names":["stopSubmit","authAPI","getAuthUserData","INITIALIZED_SUCCESS","initialState","initialized","appReducer","state","action","type","initializedSuccess","initializeApp","dispatch","me","then","response","data","resultCode","id","login","email","setAuthUserData"],"sources":["/Users/uvixmi/social-network/src/redux/app-reducer.js"],"sourcesContent":["import { stopSubmit } from \"redux-form\"\nimport { authAPI } from \"../api/api\"\nimport { getAuthUserData } from \"./auth-reducer\"\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\"\n\nlet initialState = {\n  initialized: false,\n}\n\nconst appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INITIALIZED_SUCCESS:\n      return {\n        ...state,\n        initialized,\n      }\n    default:\n      return state\n  }\n}\n\nexport const initializedSuccess = () => {\n  return {\n    type: INITIALIZED_SUCCESS,\n  }\n}\n\nexport const initializeApp = () => (dispatch) => {\n  dispatch(getAuthUserData())\n  dispatch(initializedSuccess())\n  authAPI.me().then((response) => {\n    if (response.data.resultCode === 0) {\n      let { id, login, email } = response.data.data\n      dispatch(setAuthUserData(id, email, login, true))\n    }\n  })\n}\n\nexport default appReducer\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,YAAY;AACvC,SAASC,OAAO,QAAQ,YAAY;AACpC,SAASC,eAAe,QAAQ,gBAAgB;AAChD,MAAMC,mBAAmB,GAAG,qBAAqB;AAEjD,IAAIC,YAAY,GAAG;EACjBC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,UAAU,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGH,YAAY;EAAA,IAAEI,MAAM;EAC9C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKN,mBAAmB;MACtB,OAAO;QACL,GAAGI,KAAK;QACRF;MACF,CAAC;IACH;MACE,OAAOE,KAAK;EAAA;AAElB,CAAC;AAED,OAAO,MAAMG,kBAAkB,GAAG,MAAM;EACtC,OAAO;IACLD,IAAI,EAAEN;EACR,CAAC;AACH,CAAC;AAED,OAAO,MAAMQ,aAAa,GAAG,MAAOC,QAAQ,IAAK;EAC/CA,QAAQ,CAACV,eAAe,EAAE,CAAC;EAC3BU,QAAQ,CAACF,kBAAkB,EAAE,CAAC;EAC9BT,OAAO,CAACY,EAAE,EAAE,CAACC,IAAI,CAAEC,QAAQ,IAAK;IAC9B,IAAIA,QAAQ,CAACC,IAAI,CAACC,UAAU,KAAK,CAAC,EAAE;MAClC,IAAI;QAAEC,EAAE;QAAEC,KAAK;QAAEC;MAAM,CAAC,GAAGL,QAAQ,CAACC,IAAI,CAACA,IAAI;MAC7CJ,QAAQ,CAACS,eAAe,CAACH,EAAE,EAAEE,KAAK,EAAED,KAAK,EAAE,IAAI,CAAC,CAAC;IACnD;EACF,CAAC,CAAC;AACJ,CAAC;AAED,eAAeb,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}